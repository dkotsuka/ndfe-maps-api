{"version":3,"sources":["MapContainer.js","App.js","serviceWorker.js","index.js"],"names":["MapContainer","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","showingInfoWindow","activeMarker","selectedPlace","onMarkerClick","props","marker","e","setState","onMapClicked","inherits","createClass","key","value","_this2","markers","visited","bounds","nw","se","forEach","item","position","lat","lng","mapCenter","react_default","a","createElement","dist","google","className","zoom","initialCenter","onClick","map","index","name","title","visible","Component","GoogleApiWrapper","apiKey","LoadingContainer","cuisine","App","src_MapContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72b9098d.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {Map, Marker,InfoWindow, GoogleApiWrapper} from 'google-maps-react';\r\n\r\nexport class MapContainer extends Component {\r\n\tstate = {\r\n\t    showingInfoWindow: false,\r\n\t    activeMarker: {},\r\n\t    selectedPlace: {},\r\n\t  };\r\n\trender(){\r\n\t\tconst markers = this.props.visited;\r\n\t\tconst bounds = {nw: null, se: null};\r\n\r\n\t\tmarkers.forEach((item) => {\r\n\t\t\tif (!bounds.nw && !bounds.se) {\r\n\t\t\t\tbounds.nw = {lat: item.position.lat, lng: item.position.lng};\r\n\t\t\t\tbounds.se = {lat: item.position.lat, lng: item.position.lng};\r\n\t\t\t} else {\r\n\t\t\t\tif (item.position.lat > bounds.nw.lat) {\r\n\t\t\t\t\tbounds.nw.lat = item.position.lat;\r\n\t\t\t\t}\r\n\t\t\t\tif (item.position.lat < bounds.se.lat) {\r\n\t\t\t\t\tbounds.se.lat = item.position.lat;\r\n\t\t\t\t}\r\n\t\t\t\tif (item.position.lng > bounds.se.lng) {\r\n\t\t\t\t\tbounds.se.lng = item.position.lng;\r\n\t\t\t\t}\r\n\t\t\t\tif (item.position.lng < bounds.nw.lng) {\r\n\t\t\t\t\tbounds.nw.lng = item.position.lng;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tconst mapCenter = {\tlat: (bounds.nw.lat + bounds.se.lat) / 2,\r\n\t\t\t\t\t\t\tlng: (bounds.se.lng + bounds.nw.lng) / 2};\r\n\r\n\r\n\t\treturn (\r\n\t\t\t<Map google={this.props.google}\r\n\t\t\t\tclassName={'map'}\r\n\t\t\t\tzoom={17}\r\n\t\t\t\tinitialCenter={mapCenter}\r\n\t          \tonClick={this.onMapClicked}>\r\n\r\n\t          \t{markers.map((item, index) => (\r\n\t          \t\t<Marker key={'id' + index}\r\n\t          \t\t\tposition = {item.position}\r\n\t\t\t            name={item.name}\r\n\t\t\t            title={item.title}\r\n\t\t\t            onClick={this.onMarkerClick}\r\n\t\t            />\r\n\t          \t))}\r\n\r\n\t            <InfoWindow\r\n\t\t          \tmarker={this.state.activeMarker}\r\n\t\t          \tvisible={this.state.showingInfoWindow}>\r\n\t\t            \t<div>\r\n\t\t              \t\t<h1>{this.state.selectedPlace.name}</h1>\r\n\t\t            \t</div>\r\n\t\t        </InfoWindow>\r\n          \t</Map>\r\n\t\t)\r\n\t}\r\n\tonMarkerClick = (props, marker, e) =>\r\n    this.setState({\r\n\t\tselectedPlace: props,\r\n\t\tactiveMarker: marker,\r\n\t\tshowingInfoWindow: true\r\n    });\r\n \r\n\tonMapClicked = (props) => {\r\n\t\tif (this.state.showingInfoWindow) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tshowingInfoWindow: false,\r\n\t\t\t\tactiveMarker: null\r\n\t\t\t})\r\n\t\t}\r\n\t};\r\n}\r\n\r\nconst LoadingContainer = (props) => (\r\n  <div>Fancy loading container!</div>\r\n)\r\n \r\nexport default GoogleApiWrapper({\r\n  apiKey: (\"AIzaSyCWCOLpPcQVkWfmnpp5rpE21RIdRHa5WNM\"),\r\n  LoadingContainer: LoadingContainer\r\n})(MapContainer)","import React, { Component } from 'react';\nimport './styles/css/App.css';\nimport MapContainer from './MapContainer';\n\nconst visited = [\n  { position: {lat: -23.5587936, lng: -46.6340618}, \n    name:'Rong He',\n    title: 'Rong He Liberdade',\n    cuisine: 'Chinese'},\n\n  { position: {\"lat\" : -23.5541464, \"lng\" : -46.6359451}, \n    name:'Rei dos Reis',\n    title: 'Restaurante Rei dos Reis',\n    cuisine: 'Chinese'},\n\n  { position: {\"lat\" : -23.553948, \"lng\" : -46.635726}, \n    name:'Chi Fu',\n    title: 'Restaurante Chi Fu',\n    cuisine: 'Chinese'},\n\n  { position: {\"lat\" : -23.5597755, \"lng\" : -46.6350853}, \n    name:'Aska',\n    title: 'Aska Lamen House',\n    cuisine: 'Japanese'},\n\n  { position: {\"lat\" : -23.5578761, \"lng\" : -46.6355277}, \n    name:'Espaço Kazu',\n    title: 'Espaço Kazu Restaurante',\n    cuisine: 'Japanese'},\n\n  { position: {\"lat\" : -23.5576965, \"lng\" : -46.6358918}, \n    name:'Lamen Kazu',\n    title: 'Lamen Kazu Restaurante',\n    cuisine: 'Japanese'},\n\n  { position: {lat: -23.5559823,lng: -46.6350262}, \n    name:'Korea House',\n    title: 'Restaurante Korea House',\n    cuisine: 'South Korean'},\n\n  { position: {lat: -23.5596261,lng: -46.6333928}, \n    name:'Portal da Coreia',\n    title: 'Restaurante Portal da Coreia',\n    cuisine: 'South Korean'},\n\n  { position: {lat: -23.555737,lng: -46.634325},\n    name:'Hot Pot',\n    title: 'Restaurante Hot Pot',\n    cuisine: 'South Korean'},\n  \n];\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <MapContainer visited={visited} />\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}