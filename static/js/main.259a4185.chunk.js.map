{"version":3,"sources":["js/MapContainer.js","js/ListItem.js","js/SideList.js","App.js","serviceWorker.js","index.js"],"names":["MapComponent","withScriptjs","withGoogleMap","props","react_default","a","createElement","lib","defaultZoom","defaultCenter","center","list","map","item","key","id","position","MapContainer","points","latArr","lat","lngArr","lng","Math","max","apply","Object","toConsumableArray","min","centerCalc","googleMapURL","loadingElement","style","height","containerElement","mapElement","ListItem","className","name","cuisine","SideList","this","Component","title","App","SideList_SideList","js_MapContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.259a4185.chunk.js","sourcesContent":["import React from 'react'\r\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker } from \"react-google-maps\"\r\n\r\nconst MapComponent = withScriptjs(withGoogleMap((props) =>\r\n  \t<GoogleMap\r\n      defaultZoom={17}\r\n      defaultCenter={props.center}>\r\n\t\t{props.list.map((item) => <Marker key={item.id} position={item.position} /> )}\r\n  \t</GoogleMap>\r\n))\r\n\r\nfunction MapContainer(props) {\r\n\tconst points = props.list.map((item) => item.position)\r\n\tconst center = centerCalc(points)\r\n\treturn (\r\n\t\t<MapComponent\r\n\t\t\tlist = {props.list}\r\n\t\t\tcenter = {center}\r\n        \tgoogleMapURL=\"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places\"\r\n        \tloadingElement={<div style={{ height: `100%` }} />}\r\n        \tcontainerElement={<div style={{ height: `100%` }} />}\r\n        \tmapElement={<div style={{ height: `100%` }} />}\r\n        />\r\n    )\r\n}\r\n\r\nfunction centerCalc(points) {\r\n\tconst latArr = points.map((item) => item.lat)\r\n\tconst lngArr = points.map((item) => item.lng)\r\n\tconst lat = (Math.max(...latArr) + Math.min(...latArr))/2\r\n\tconst lng = (Math.max(...lngArr) + Math.min(...lngArr))/2\r\n\treturn {lat: lat, lng: lng}\t\r\n}\r\n\r\nexport default MapContainer","import React from 'react'\r\n\r\nexport default function ListItem(props) {\r\n\treturn (\r\n\t\t<li className='list-item-container'>\r\n\t\t\t<h2>{props.item.name}</h2>\r\n\t\t\t<span>{props.item.cuisine}</span>\r\n\t\t</li>\r\n\t)\r\n}","import React, {Component} from 'react'\r\nimport ListItem from './ListItem'\r\n\r\nexport default class SideList extends Component{\r\n\trender(){\r\n\t\tconst list = this.props.list;\r\n\t\treturn (\r\n\t\t\t<div className='side-list'>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{list.map((item) => (\r\n\t\t\t\t\t\t<ListItem item={item}/>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}","import React, { Component } from 'react';\nimport './styles/css/App.css';\nimport MapContainer from './js/MapContainer'\nimport SideList from './js/SideList'\n\nconst list = [\n  { position: {lat: -23.5587936, lng: -46.6340618}, \n    name:'Rong He',\n    id: 'ID ChIJAw8StqdZzpQRBpZ57GrkIh4',\n    title: 'Rong He Liberdade',\n    cuisine: 'cn'},\n\n  { position: {\"lat\" : -23.5541464, \"lng\" : -46.6359451}, \n    name:'Rei dos Reis',\n    id: 'ChIJo-S5XKlZzpQRq8ctPsBPd4c',\n    title: 'Restaurante Rei dos Reis',\n    cuisine: 'cn'},\n\n  { position: {\"lat\" : -23.553948, \"lng\" : -46.635726}, \n    name:'Chi Fu',\n    id: 'ChIJE4LPXKlZzpQRWaPXypCAzBw',\n    title: 'Restaurante Chi Fu',\n    cuisine: 'cn'},\n\n  { position: {\"lat\" : -23.5597755, \"lng\" : -46.6350853}, \n    name:'Aska',\n    id: 'ChIJDZ6ZWqZZzpQRa8A6tDNwU0Y',\n    title: 'Aska Lamen House',\n    cuisine: 'cn'},\n\n  { position: {\"lat\" : -23.5578761, \"lng\" : -46.6355277}, \n    name:'Espaço Kazu',\n    id: 'ChIJMZ9an6hZzpQRUrj4GXD11t8',\n    title: 'Espaço Kazu Restaurante',\n    cuisine: 'jp'},\n\n  { position: {\"lat\" : -23.5576965, \"lng\" : -46.6358918}, \n    name:'Lamen Kazu',\n    id: 'ChIJfbcVS2NgzpQRKYYwcNza9T4',\n    title: 'Lamen Kazu Restaurante',\n    cuisine: 'jp'},\n\n  { position: {lat: -23.5559823,lng: -46.6350262}, \n    name:'Korea House',\n    id: 'ChIJ045q5KhZzpQRpKqzA6f3mvg',\n    title: 'Restaurante Korea House',\n    cuisine: 'kr'},\n\n  { position: {lat: -23.5596261,lng: -46.6333928}, \n    name:'Portal da Coreia',\n    id: 'ChIJhdJaCqdZzpQRTmJiEdrFlfk',\n    title: 'Restaurante Portal da Coreia',\n    cuisine: 'kr'},\n\n  { position: {lat: -23.555737,lng: -46.634325},\n    name:'Top Pot',\n    id: 'ChIJvdy-V6hZzpQR68pwuZGyYuY',\n    title: 'Restaurante Hot Pot',\n    cuisine: 'kr'},\n\n  { position: {lat: -23.5576366,lng: -46.6356632},\n    name: 'Porque Sim',\n    id: 'ChIJh-Aho6hZzpQRrjYN_2is5ek',\n    title: 'Restaurante Porque Sim',\n    cuisine: 'jp'},\n\n  { position: {lat: -23.5576682,lng: -46.6360849},\n    name: 'Thai Chef Experience',\n    id: 'ChIJW5xqpahZzpQRVPKfXEFJcag',\n    title: 'Restaurante Thai Chef',\n    cuisine: 'th'},\n];\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <SideList list={list}/>\n        <MapContainer list={list}/>\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}